/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.edu.ufersa.controlConsult.gui;

import br.edu.ufersa.controlConsult.model.Especialidade;
import br.edu.ufersa.controlConsult.model.Pessoa;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;


public class MarcarConsulta extends javax.swing.JFrame {

    /**
     * Creates new form MarcarConsulta
     */
    private Pessoa pessoa;
    List<Pessoa> medicos;
    public MarcarConsulta() {
        initComponents();
        loadEspecialidades();
    }
    
    public MarcarConsulta(String nomeDoMedico){
        initComponents();
        loadEspecialidades();
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCheckBox1 = new javax.swing.JCheckBox();
        nomeDoMedico = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listaDeMedicos = new javax.swing.JList<>();
        opcao1 = new javax.swing.JCheckBox();
        opcao2 = new javax.swing.JCheckBox();
        especialidadeDoMedico = new javax.swing.JComboBox<>();
        pesquisar = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        CPFField = new javax.swing.JFormattedTextField();
        nome_paciente = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        jCheckBox1.setText("jCheckBox1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Marcar Consulta");

        nomeDoMedico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nomeDoMedicoActionPerformed(evt);
            }
        });

        jLabel1.setText("Médico:");

        jLabel2.setText("Especialidade:");

        jScrollPane1.setViewportView(listaDeMedicos);

        opcao1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcao1ActionPerformed(evt);
            }
        });

        opcao2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcao2ActionPerformed(evt);
            }
        });

        especialidadeDoMedico.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Geral", "Psiquiatra", "Neurologista" }));
        especialidadeDoMedico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                especialidadeDoMedicoActionPerformed(evt);
            }
        });

        pesquisar.setText("Pesquisar");
        pesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pesquisarActionPerformed(evt);
            }
        });

        jLabel3.setText("CPF Paciente:");

        try {
            CPFField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###.###.###-##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        CPFField.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        CPFField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CPFFieldActionPerformed(evt);
            }
        });

        nome_paciente.setText(" ");

        jLabel5.setText("Paciente Selecionado: ");

        jButton1.setText("Selecionar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Mostrar Horários");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nome_paciente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(21, 21, 21)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel2)
                                        .addComponent(jLabel1))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(nomeDoMedico)
                                        .addComponent(especialidadeDoMedico, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(opcao2)
                                        .addComponent(opcao1)))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(140, 140, 140)
                                    .addComponent(pesquisar))
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jLabel3)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(CPFField, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(jButton1))))
                .addGap(0, 18, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(145, 145, 145)
                .addComponent(jButton2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(CPFField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nome_paciente)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(nomeDoMedico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(opcao1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(especialidadeDoMedico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(opcao2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pesquisar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton2)
                .addGap(7, 7, 7))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void opcao2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcao2ActionPerformed
        // TODO add your handling code here:
        opcao1.setSelected(false);
        
    }//GEN-LAST:event_opcao2ActionPerformed

    private void especialidadeDoMedicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_especialidadeDoMedicoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_especialidadeDoMedicoActionPerformed

    private void opcao1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcao1ActionPerformed
        // TODO add your handling code here:
        opcao2.setSelected(false);
        
    }//GEN-LAST:event_opcao1ActionPerformed

    private void pesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pesquisarActionPerformed
        // TODO add your handling code here:
        if(opcao1.isSelected()){
            medicos = Pessoa.findMedicosByNome(nomeDoMedico.getText());
            if (medicos.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Nenhum médico encontrado com este nome");
                    DefaultListModel model = new DefaultListModel();
                    listaDeMedicos.setModel(model);
                } else {
                    DefaultListModel model = new DefaultListModel();
                    int cont = 0;
                    for (Pessoa pa : medicos) {
                        model.add(cont, pa.getNome() + " - " + pa.getMedico().getEspecialidade().getNome());
                        cont++;
                    }
                    listaDeMedicos.setModel(model);
                    listaDeMedicos.setEnabled(true);
                }
        }
        if(opcao2.isSelected()){
            medicos = Pessoa.findMedicos();
            Especialidade e = extrairEspecialidade();
            List<Pessoa> temp = new ArrayList<Pessoa>();
            for (Pessoa pa : medicos) {
                    if(pa.getMedico().getEspecialidade().getNome().equals(e.getNome())) {
                        temp.add(pa);
                    }
            }
            medicos = temp;
            if (medicos.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Nenhum médico encontrado com esta especialidade");
                    DefaultListModel model = new DefaultListModel();
                    listaDeMedicos.setModel(model);
                } else {
                    DefaultListModel model = new DefaultListModel();
                    int cont = 0;
                    for (Pessoa pa : medicos) {
                        model.add(cont, pa.getNome() + " - " + pa.getMedico().getEspecialidade().getNome());
                        cont++;
                    }
                    listaDeMedicos.setModel(model);
                    listaDeMedicos.setEnabled(true);
                }
        }
    }//GEN-LAST:event_pesquisarActionPerformed

    private void nomeDoMedicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nomeDoMedicoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nomeDoMedicoActionPerformed

    private void CPFFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CPFFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CPFFieldActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        Pessoa p = Pessoa.findByCPF(CPFField.getText());
        if(p==null){
            JOptionPane.showMessageDialog(this, "Pessoa não encontrado");
        }else{
            if(p.getPaciente()==null){
                JOptionPane.showMessageDialog(this, "A Pessoa selecionada não é um paciente");
            }else{
                pessoa = p;
                nome_paciente.setText(p.getNome());
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        if(pessoa == null){
            JOptionPane.showMessageDialog(this, "Informe o CPF do paciente");
        }else{
            if(listaDeMedicos.isSelectionEmpty()){
                JOptionPane.showMessageDialog(this, "Selecione algum médico");
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MarcarConsulta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MarcarConsulta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MarcarConsulta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MarcarConsulta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MarcarConsulta().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFormattedTextField CPFField;
    private javax.swing.JComboBox<String> especialidadeDoMedico;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<String> listaDeMedicos;
    private javax.swing.JTextField nomeDoMedico;
    private javax.swing.JLabel nome_paciente;
    private javax.swing.JCheckBox opcao1;
    private javax.swing.JCheckBox opcao2;
    private javax.swing.JButton pesquisar;
    // End of variables declaration//GEN-END:variables

private Map<String, Especialidade> especialidesMap = new HashMap<>();
private void loadEspecialidades() {
        List<Especialidade> bd_especialidades = Especialidade.findAll();
        if (bd_especialidades.isEmpty()) { // Default Especialidades
            bd_especialidades = Arrays.asList(
                    new Especialidade("Clínico Geral"),
                    new Especialidade("Pediatra")
            );
        }
        bd_especialidades.forEach(especialidade -> especialidesMap.put(especialidade.getNome(), especialidade));
        Set<String> keys = especialidesMap.keySet();
        String[] keys_string = keys.toArray(new String[keys.size()]);
        Arrays.sort(keys_string);
        ComboBoxModel<String> model = new DefaultComboBoxModel<String>(keys_string);
        especialidadeDoMedico.setModel(model);
 }

private Especialidade extrairEspecialidade() { //TODO
        Especialidade especialidade = especialidesMap.get(especialidadeDoMedico.getModel().getSelectedItem());
        return especialidade;
    }
}
